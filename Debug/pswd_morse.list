
pswd_morse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004134  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004354  08004354  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800435c  0800435c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08004370  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08004370  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea6d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e00  00000000  00000000  0002eaa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  000308b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  00031768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002633f  00000000  00000000  00032528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac11  00000000  00000000  00058867  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eeb4c  00000000  00000000  00063478  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151fc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db4  00000000  00000000  00152040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042a4 	.word	0x080042a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080042a4 	.word	0x080042a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	button.maybe_pressed = true;
 80004d2:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	705a      	strb	r2, [r3, #1]
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	20000030 	.word	0x20000030

080004e8 <HAL_TIM_PeriodElapsedCallback>:
 * @brief  Period elapsed callback in non-blocking mode each 1mSec
 * @param  htim TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	if (button.maybe_pressed == true) {
 80004f0:	4b53      	ldr	r3, [pc, #332]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80004f2:	785b      	ldrb	r3, [r3, #1]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d005      	beq.n	8000504 <HAL_TIM_PeriodElapsedCallback+0x1c>
		button.counter++;
 80004f8:	4b51      	ldr	r3, [pc, #324]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	4b4f      	ldr	r3, [pc, #316]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000502:	701a      	strb	r2, [r3, #0]
	}


	if ( button.counter >= 10 ) {
 8000504:	4b4e      	ldr	r3, [pc, #312]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b09      	cmp	r3, #9
 800050a:	d910      	bls.n	800052e <HAL_TIM_PeriodElapsedCallback+0x46>
		button.maybe_pressed = false;
 800050c:	4b4c      	ldr	r3, [pc, #304]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800050e:	2200      	movs	r2, #0
 8000510:	705a      	strb	r2, [r3, #1]
		button.counter = 0;
 8000512:	4b4b      	ldr	r3, [pc, #300]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
		button.pressed = true;
 8000518:	4b49      	ldr	r3, [pc, #292]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800051a:	2201      	movs	r2, #1
 800051c:	709a      	strb	r2, [r3, #2]
		fsm.evt = EVT_PRESSED;
 800051e:	4b49      	ldr	r3, [pc, #292]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000520:	2205      	movs	r2, #5
 8000522:	715a      	strb	r2, [r3, #5]
		fsm.new_evt = true;
 8000524:	4a47      	ldr	r2, [pc, #284]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000526:	7993      	ldrb	r3, [r2, #6]
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	7193      	strb	r3, [r2, #6]
	}

	if( button.pressed == true ) { /* IDK when clear this flag yet!!! */
 800052e:	4b44      	ldr	r3, [pc, #272]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000530:	789b      	ldrb	r3, [r3, #2]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d039      	beq.n	80005aa <HAL_TIM_PeriodElapsedCallback+0xc2>
		if ( !(GPIOC->IDR & (1<<13)) ) { /* Always pressed */
 8000536:	4b44      	ldr	r3, [pc, #272]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000538:	691b      	ldr	r3, [r3, #16]
 800053a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800053e:	2b00      	cmp	r3, #0
 8000540:	d106      	bne.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x68>
			fsm.counter_time++;
 8000542:	4b40      	ldr	r3, [pc, #256]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000544:	885b      	ldrh	r3, [r3, #2]
 8000546:	3301      	adds	r3, #1
 8000548:	b29a      	uxth	r2, r3
 800054a:	4b3e      	ldr	r3, [pc, #248]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800054c:	805a      	strh	r2, [r3, #2]
 800054e:	e02c      	b.n	80005aa <HAL_TIM_PeriodElapsedCallback+0xc2>
		} else {

			if ( fsm.counter_time >= DOT_TIME && fsm.counter_time <= DOT_TIME_ALLOWED ) {
 8000550:	4b3c      	ldr	r3, [pc, #240]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000552:	885b      	ldrh	r3, [r3, #2]
 8000554:	2b63      	cmp	r3, #99	; 0x63
 8000556:	d910      	bls.n	800057a <HAL_TIM_PeriodElapsedCallback+0x92>
 8000558:	4b3a      	ldr	r3, [pc, #232]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800055a:	885b      	ldrh	r3, [r3, #2]
 800055c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000560:	d80b      	bhi.n	800057a <HAL_TIM_PeriodElapsedCallback+0x92>
				button.pressed = false;
 8000562:	4b37      	ldr	r3, [pc, #220]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000564:	2200      	movs	r2, #0
 8000566:	709a      	strb	r2, [r3, #2]
				fsm.evt = EVT_CONFIRM_DOT;
 8000568:	4b36      	ldr	r3, [pc, #216]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800056a:	2203      	movs	r2, #3
 800056c:	715a      	strb	r2, [r3, #5]
				fsm.new_evt = true;
 800056e:	4a35      	ldr	r2, [pc, #212]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000570:	7993      	ldrb	r3, [r2, #6]
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	7193      	strb	r3, [r2, #6]
 8000578:	e014      	b.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0xbc>
			} else if ( fsm.counter_time >= DASH_TIME_ALLOWED && fsm.counter_time <= DASH_TIME ) {
 800057a:	4b32      	ldr	r3, [pc, #200]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800057c:	885b      	ldrh	r3, [r3, #2]
 800057e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000582:	d30f      	bcc.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8000584:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000586:	885b      	ldrh	r3, [r3, #2]
 8000588:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800058c:	d80a      	bhi.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0xbc>
				button.pressed = false;
 800058e:	4b2c      	ldr	r3, [pc, #176]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000590:	2200      	movs	r2, #0
 8000592:	709a      	strb	r2, [r3, #2]
				fsm.evt = EVT_CONFIRM_DASH;
 8000594:	4b2b      	ldr	r3, [pc, #172]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000596:	2204      	movs	r2, #4
 8000598:	715a      	strb	r2, [r3, #5]
				fsm.new_evt = true;
 800059a:	4a2a      	ldr	r2, [pc, #168]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800059c:	7993      	ldrb	r3, [r2, #6]
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	7193      	strb	r3, [r2, #6]
			}



			fsm.counter_time = 0;
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	805a      	strh	r2, [r3, #2]
		}
	}

	if ( fsm.counter_time == DOT_TIME ) {
 80005aa:	4b26      	ldr	r3, [pc, #152]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005ac:	885b      	ldrh	r3, [r3, #2]
 80005ae:	2b64      	cmp	r3, #100	; 0x64
 80005b0:	d107      	bne.n	80005c2 <HAL_TIM_PeriodElapsedCallback+0xda>
		fsm.evt = EVT_DOT;
 80005b2:	4b24      	ldr	r3, [pc, #144]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	715a      	strb	r2, [r3, #5]
		fsm.new_evt = true;
 80005b8:	4a22      	ldr	r2, [pc, #136]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005ba:	7993      	ldrb	r3, [r2, #6]
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	7193      	strb	r3, [r2, #6]
	}

	if ( fsm.counter_time == DASH_TIME ) {
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005c4:	885b      	ldrh	r3, [r3, #2]
 80005c6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80005ca:	d111      	bne.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0x108>
		if (fsm.state == STATE_IDLE) {
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00d      	beq.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0x108>

		} else {
			button.pressed = false;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	709a      	strb	r2, [r3, #2]
			fsm.counter_time = 0;
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	805a      	strh	r2, [r3, #2]
			fsm.evt = EVT_DASH;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	715a      	strb	r2, [r3, #5]
			fsm.new_evt = true;
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005e8:	7993      	ldrb	r3, [r2, #6]
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	7193      	strb	r3, [r2, #6]
		}
	}

	if ( fsm.start_timeout == true ) {
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005f2:	799b      	ldrb	r3, [r3, #6]
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d006      	beq.n	800060c <HAL_TIM_PeriodElapsedCallback+0x124>
		fsm.count_timeout++;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000608:	801a      	strh	r2, [r3, #0]
 800060a:	e002      	b.n	8000612 <HAL_TIM_PeriodElapsedCallback+0x12a>
	} else {
		fsm.count_timeout = 0;
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800060e:	2200      	movs	r2, #0
 8000610:	801a      	strh	r2, [r3, #0]
	}

	if ( fsm.count_timeout >= TIMEOUT ) {
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	f241 3287 	movw	r2, #4999	; 0x1387
 800061a:	4293      	cmp	r3, r2
 800061c:	d90a      	bls.n	8000634 <HAL_TIM_PeriodElapsedCallback+0x14c>
		fsm.count_timeout = 0;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000620:	2200      	movs	r2, #0
 8000622:	801a      	strh	r2, [r3, #0]
		fsm.evt = EVT_TIMEOUT;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000626:	2206      	movs	r2, #6
 8000628:	715a      	strb	r2, [r3, #5]
		fsm.new_evt = true;
 800062a:	4a06      	ldr	r2, [pc, #24]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800062c:	7993      	ldrb	r3, [r2, #6]
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	7193      	strb	r3, [r2, #6]
	}

}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000030 	.word	0x20000030
 8000644:	20000028 	.word	0x20000028
 8000648:	48000800 	.word	0x48000800

0800064c <print_current_state>:

void print_current_state ( fsm_t *fsm ) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	switch (fsm->state) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	2b04      	cmp	r3, #4
 800065a:	d830      	bhi.n	80006be <print_current_state+0x72>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <print_current_state+0x18>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	08000679 	.word	0x08000679
 8000668:	08000687 	.word	0x08000687
 800066c:	08000695 	.word	0x08000695
 8000670:	080006a3 	.word	0x080006a3
 8000674:	080006b1 	.word	0x080006b1
	case STATE_IDLE:
		HAL_UART_Transmit(&huart2, (uint8_t*)"STATE_IDLE\n", sizeof("STATE_IDLE\n")-1, 100);
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	220b      	movs	r2, #11
 800067c:	4915      	ldr	r1, [pc, #84]	; (80006d4 <print_current_state+0x88>)
 800067e:	4816      	ldr	r0, [pc, #88]	; (80006d8 <print_current_state+0x8c>)
 8000680:	f002 fec8 	bl	8003414 <HAL_UART_Transmit>
		break;
 8000684:	e022      	b.n	80006cc <print_current_state+0x80>
	case STATE_DOT:
		HAL_UART_Transmit(&huart2, (uint8_t*)"STATE_DOT\n", sizeof("STATE_DOT\n")-1, 100);
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	220a      	movs	r2, #10
 800068a:	4914      	ldr	r1, [pc, #80]	; (80006dc <print_current_state+0x90>)
 800068c:	4812      	ldr	r0, [pc, #72]	; (80006d8 <print_current_state+0x8c>)
 800068e:	f002 fec1 	bl	8003414 <HAL_UART_Transmit>
		break;
 8000692:	e01b      	b.n	80006cc <print_current_state+0x80>
	case STATE_DASH_1:
		HAL_UART_Transmit(&huart2, (uint8_t*)"STATE_DASH_1\n", sizeof("STATE_DASH_1\n")-1, 100);
 8000694:	2364      	movs	r3, #100	; 0x64
 8000696:	220d      	movs	r2, #13
 8000698:	4911      	ldr	r1, [pc, #68]	; (80006e0 <print_current_state+0x94>)
 800069a:	480f      	ldr	r0, [pc, #60]	; (80006d8 <print_current_state+0x8c>)
 800069c:	f002 feba 	bl	8003414 <HAL_UART_Transmit>
		break;
 80006a0:	e014      	b.n	80006cc <print_current_state+0x80>
	case STATE_DASH_2:
		HAL_UART_Transmit(&huart2, (uint8_t*)"STATE_DASH_2\n", sizeof("STATE_DASH_2\n")-1, 100);
 80006a2:	2364      	movs	r3, #100	; 0x64
 80006a4:	220d      	movs	r2, #13
 80006a6:	490f      	ldr	r1, [pc, #60]	; (80006e4 <print_current_state+0x98>)
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <print_current_state+0x8c>)
 80006aa:	f002 feb3 	bl	8003414 <HAL_UART_Transmit>
		break;
 80006ae:	e00d      	b.n	80006cc <print_current_state+0x80>
	case STATE_ACCEPTED:
		HAL_UART_Transmit(&huart2, (uint8_t*)"STATE_ACCEPTED\n", sizeof("STATE_ACCEPTED\n")-1, 100);
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	220f      	movs	r2, #15
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <print_current_state+0x9c>)
 80006b6:	4808      	ldr	r0, [pc, #32]	; (80006d8 <print_current_state+0x8c>)
 80006b8:	f002 feac 	bl	8003414 <HAL_UART_Transmit>
		break;
 80006bc:	e006      	b.n	80006cc <print_current_state+0x80>
	default:
		HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR\n", sizeof("ERROR\n")-1, 100);
 80006be:	2364      	movs	r3, #100	; 0x64
 80006c0:	2206      	movs	r2, #6
 80006c2:	490a      	ldr	r1, [pc, #40]	; (80006ec <print_current_state+0xa0>)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <print_current_state+0x8c>)
 80006c6:	f002 fea5 	bl	8003414 <HAL_UART_Transmit>
		break;
 80006ca:	bf00      	nop
	}
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	080042bc 	.word	0x080042bc
 80006d8:	20000074 	.word	0x20000074
 80006dc:	080042c8 	.word	0x080042c8
 80006e0:	080042d4 	.word	0x080042d4
 80006e4:	080042e4 	.word	0x080042e4
 80006e8:	080042f4 	.word	0x080042f4
 80006ec:	08004304 	.word	0x08004304

080006f0 <fsm_run>:
/**
 * @brief  Execute password's fsm
 * @param  fsm FSM handle
 * @retval None
 */
void fsm_run ( fsm_t *fsm ) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	if ( fsm->new_evt == true ) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	799b      	ldrb	r3, [r3, #6]
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	f000 80ce 	beq.w	80008a4 <fsm_run+0x1b4>
		fsm->new_evt = false;
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	7993      	ldrb	r3, [r2, #6]
 800070c:	f36f 0300 	bfc	r3, #0, #1
 8000710:	7193      	strb	r3, [r2, #6]
		switch ( fsm->state ) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	2b04      	cmp	r3, #4
 8000718:	f200 80bd 	bhi.w	8000896 <fsm_run+0x1a6>
 800071c:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <fsm_run+0x34>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000739 	.word	0x08000739
 8000728:	08000779 	.word	0x08000779
 800072c:	080007c9 	.word	0x080007c9
 8000730:	08000819 	.word	0x08000819
 8000734:	08000875 	.word	0x08000875
		case STATE_IDLE:	/* DOT */
			if ( fsm->evt == EVT_DOT ) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	795b      	ldrb	r3, [r3, #5]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d103      	bne.n	8000748 <fsm_run+0x58>
				fsm->state= STATE_IDLE;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	711a      	strb	r2, [r3, #4]
 8000746:	e013      	b.n	8000770 <fsm_run+0x80>
			} else if ( fsm->evt == EVT_DASH ) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	795b      	ldrb	r3, [r3, #5]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d103      	bne.n	8000758 <fsm_run+0x68>
				fsm->state= STATE_IDLE;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	711a      	strb	r2, [r3, #4]
 8000756:	e00b      	b.n	8000770 <fsm_run+0x80>
			} else if ( fsm->evt == EVT_CONFIRM_DOT ) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	795b      	ldrb	r3, [r3, #5]
 800075c:	2b03      	cmp	r3, #3
 800075e:	d107      	bne.n	8000770 <fsm_run+0x80>
				fsm->start_timeout = true; /**/
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	7993      	ldrb	r3, [r2, #6]
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	7193      	strb	r3, [r2, #6]
				fsm->state= STATE_DOT;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2201      	movs	r2, #1
 800076e:	711a      	strb	r2, [r3, #4]
			}
			print_current_state(fsm);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff6b 	bl	800064c <print_current_state>
			break;
 8000776:	e098      	b.n	80008aa <fsm_run+0x1ba>

		case STATE_DOT:		/* DASH */
			if ( fsm->evt == EVT_DASH || fsm->evt == EVT_CONFIRM_DASH ) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	795b      	ldrb	r3, [r3, #5]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d003      	beq.n	8000788 <fsm_run+0x98>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	795b      	ldrb	r3, [r3, #5]
 8000784:	2b04      	cmp	r3, #4
 8000786:	d10b      	bne.n	80007a0 <fsm_run+0xb0>
				fsm->count_timeout = 0;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2200      	movs	r2, #0
 800078c:	801a      	strh	r2, [r3, #0]
				fsm->start_timeout = true; /**/
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	7993      	ldrb	r3, [r2, #6]
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	7193      	strb	r3, [r2, #6]
				fsm->state= STATE_DASH_1;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2202      	movs	r2, #2
 800079c:	711a      	strb	r2, [r3, #4]
 800079e:	e00f      	b.n	80007c0 <fsm_run+0xd0>
			} else if ( fsm->evt == EVT_CONFIRM_DOT || fsm->evt == EVT_TIMEOUT ) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	795b      	ldrb	r3, [r3, #5]
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	d003      	beq.n	80007b0 <fsm_run+0xc0>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	795b      	ldrb	r3, [r3, #5]
 80007ac:	2b06      	cmp	r3, #6
 80007ae:	d107      	bne.n	80007c0 <fsm_run+0xd0>
				fsm->start_timeout = false; /**/
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7993      	ldrb	r3, [r2, #6]
 80007b4:	f36f 0341 	bfc	r3, #1, #1
 80007b8:	7193      	strb	r3, [r2, #6]
				fsm->state= STATE_IDLE;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	711a      	strb	r2, [r3, #4]
			}
			print_current_state(fsm);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff43 	bl	800064c <print_current_state>
			break;
 80007c6:	e070      	b.n	80008aa <fsm_run+0x1ba>

		case STATE_DASH_1:	/* DASH */
			if ( fsm->evt == EVT_DASH || fsm->evt == EVT_CONFIRM_DASH ) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	795b      	ldrb	r3, [r3, #5]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d003      	beq.n	80007d8 <fsm_run+0xe8>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	795b      	ldrb	r3, [r3, #5]
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d10b      	bne.n	80007f0 <fsm_run+0x100>
				fsm->count_timeout = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	801a      	strh	r2, [r3, #0]
				fsm->start_timeout = true; /**/
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	7993      	ldrb	r3, [r2, #6]
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	7193      	strb	r3, [r2, #6]
				fsm->state= STATE_DASH_2;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2203      	movs	r2, #3
 80007ec:	711a      	strb	r2, [r3, #4]
 80007ee:	e00f      	b.n	8000810 <fsm_run+0x120>
			} else if ( fsm->evt == EVT_CONFIRM_DOT || fsm->evt == EVT_TIMEOUT ) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	795b      	ldrb	r3, [r3, #5]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d003      	beq.n	8000800 <fsm_run+0x110>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	795b      	ldrb	r3, [r3, #5]
 80007fc:	2b06      	cmp	r3, #6
 80007fe:	d107      	bne.n	8000810 <fsm_run+0x120>
				fsm->start_timeout = false; /**/
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	7993      	ldrb	r3, [r2, #6]
 8000804:	f36f 0341 	bfc	r3, #1, #1
 8000808:	7193      	strb	r3, [r2, #6]
				fsm->state= STATE_IDLE;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	711a      	strb	r2, [r3, #4]
			}
			print_current_state(fsm);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff1b 	bl	800064c <print_current_state>
			break;
 8000816:	e048      	b.n	80008aa <fsm_run+0x1ba>

		case STATE_DASH_2: /* DASH */
			if ( fsm->evt == EVT_DASH || fsm->evt == EVT_CONFIRM_DASH ) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	795b      	ldrb	r3, [r3, #5]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d003      	beq.n	8000828 <fsm_run+0x138>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d111      	bne.n	800084c <fsm_run+0x15c>
				fsm->count_timeout = 0;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	801a      	strh	r2, [r3, #0]
				fsm->start_timeout = true; /**/
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	7993      	ldrb	r3, [r2, #6]
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	7193      	strb	r3, [r2, #6]
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	2120      	movs	r1, #32
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f000 fe3c 	bl	80014bc <HAL_GPIO_WritePin>
				fsm->state = STATE_ACCEPTED;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2204      	movs	r2, #4
 8000848:	711a      	strb	r2, [r3, #4]
 800084a:	e00f      	b.n	800086c <fsm_run+0x17c>
			} else if ( fsm->evt == EVT_CONFIRM_DOT || fsm->evt == EVT_TIMEOUT ) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	795b      	ldrb	r3, [r3, #5]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d003      	beq.n	800085c <fsm_run+0x16c>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	795b      	ldrb	r3, [r3, #5]
 8000858:	2b06      	cmp	r3, #6
 800085a:	d107      	bne.n	800086c <fsm_run+0x17c>
				fsm->start_timeout = false; /**/
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	7993      	ldrb	r3, [r2, #6]
 8000860:	f36f 0341 	bfc	r3, #1, #1
 8000864:	7193      	strb	r3, [r2, #6]
				fsm->state = STATE_IDLE;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	711a      	strb	r2, [r3, #4]
			}
			print_current_state(fsm);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff feed 	bl	800064c <print_current_state>
			break;
 8000872:	e01a      	b.n	80008aa <fsm_run+0x1ba>

		case STATE_ACCEPTED:
			if ( fsm->evt == EVT_PRESSED ) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	795b      	ldrb	r3, [r3, #5]
 8000878:	2b05      	cmp	r3, #5
 800087a:	d115      	bne.n	80008a8 <fsm_run+0x1b8>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2120      	movs	r1, #32
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f000 fe1a 	bl	80014bc <HAL_GPIO_WritePin>
				fsm->state = STATE_IDLE;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	711a      	strb	r2, [r3, #4]
				print_current_state(fsm);
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fedc 	bl	800064c <print_current_state>
			}
			break;
 8000894:	e008      	b.n	80008a8 <fsm_run+0x1b8>

		default: /* ERROR */
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000896:	2201      	movs	r2, #1
 8000898:	2120      	movs	r1, #32
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f000 fe0d 	bl	80014bc <HAL_GPIO_WritePin>
			while(1);
 80008a2:	e7fe      	b.n	80008a2 <fsm_run+0x1b2>
			break;
		}
	}
 80008a4:	bf00      	nop
 80008a6:	e000      	b.n	80008aa <fsm_run+0x1ba>
			break;
 80008a8:	bf00      	nop
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop

080008b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008b8:	f000 fa95 	bl	8000de6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008bc:	f000 f814 	bl	80008e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008c0:	f000 f8f6 	bl	8000ab0 <MX_GPIO_Init>
	MX_TIM2_Init();
 80008c4:	f000 f876 	bl	80009b4 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 80008c8:	f000 f8c2 	bl	8000a50 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <main+0x2c>)
 80008ce:	f002 f94f 	bl	8002b70 <HAL_TIM_Base_Start_IT>
	print_current_state(&fsm);
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <main+0x30>)
 80008d4:	f7ff feba 	bl	800064c <print_current_state>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		fsm_run(&fsm);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <main+0x30>)
 80008da:	f7ff ff09 	bl	80006f0 <fsm_run>
 80008de:	e7fb      	b.n	80008d8 <main+0x24>
 80008e0:	20000034 	.word	0x20000034
 80008e4:	20000028 	.word	0x20000028

080008e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0b8      	sub	sp, #224	; 0xe0
 80008ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008f2:	2244      	movs	r2, #68	; 0x44
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 fccc 	bl	8004294 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	463b      	mov	r3, r7
 800090e:	2288      	movs	r2, #136	; 0x88
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f003 fcbe 	bl	8004294 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000918:	2310      	movs	r3, #16
 800091a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800091e:	2301      	movs	r3, #1
 8000920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000936:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fe52 	bl	80015e4 <HAL_RCC_OscConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000946:	f000 f90b 	bl	8000b60 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	230f      	movs	r3, #15
 800094c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000968:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f001 fa1e 	bl	8001db0 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x96>
	{
		Error_Handler();
 800097a:	f000 f8f1 	bl	8000b60 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800097e:	2302      	movs	r3, #2
 8000980:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000982:	2300      	movs	r3, #0
 8000984:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fc15 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8000994:	f000 f8e4 	bl	8000b60 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000998:	f44f 7000 	mov.w	r0, #512	; 0x200
 800099c:	f000 fdcc 	bl	8001538 <HAL_PWREx_ControlVoltageScaling>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80009a6:	f000 f8db 	bl	8000b60 <Error_Handler>
	}
}
 80009aa:	bf00      	nop
 80009ac:	37e0      	adds	r7, #224	; 0xe0
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009dc:	220f      	movs	r2, #15
 80009de:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ec:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009fc:	f002 f88c 	bl	8002b18 <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8000a06:	f000 f8ab 	bl	8000b60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_TIM2_Init+0x98>)
 8000a18:	f002 f9f3 	bl	8002e02 <HAL_TIM_ConfigClockSource>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8000a22:	f000 f89d 	bl	8000b60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_TIM2_Init+0x98>)
 8000a34:	f002 fbfa 	bl	800322c <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8000a3e:	f000 f88f 	bl	8000b60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	3720      	adds	r7, #32
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000034 	.word	0x20000034

08000a50 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a56:	4a15      	ldr	r2, [pc, #84]	; (8000aac <MX_USART2_UART_Init+0x5c>)
 8000a58:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a94:	f002 fc70 	bl	8003378 <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000a9e:	f000 f85f 	bl	8000b60 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000074 	.word	0x20000074
 8000aac:	40004400 	.word	0x40004400

08000ab0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <MX_GPIO_Init+0xa4>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	4a22      	ldr	r2, [pc, #136]	; (8000b54 <MX_GPIO_Init+0xa4>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <MX_GPIO_Init+0xa4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_GPIO_Init+0xa4>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <MX_GPIO_Init+0xa4>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_GPIO_Init+0xa4>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2120      	movs	r1, #32
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f000 fcdd 	bl	80014bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_GPIO_Init+0xa8>)
 8000b0a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	4811      	ldr	r0, [pc, #68]	; (8000b5c <MX_GPIO_Init+0xac>)
 8000b18:	f000 fb28 	bl	800116c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b36:	f000 fb19 	bl	800116c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2028      	movs	r0, #40	; 0x28
 8000b40:	f000 fa9d 	bl	800107e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b44:	2028      	movs	r0, #40	; 0x28
 8000b46:	f000 fab6 	bl	80010b6 <HAL_NVIC_EnableIRQ>

}
 8000b4a:	bf00      	nop
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000
 8000b58:	10210000 	.word	0x10210000
 8000b5c:	48000800 	.word	0x48000800

08000b60 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6613      	str	r3, [r2, #96]	; 0x60
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc8:	d113      	bne.n	8000bf2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_TIM_Base_MspInit+0x44>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_TIM_Base_MspInit+0x44>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_TIM_Base_MspInit+0x44>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	201c      	movs	r0, #28
 8000be8:	f000 fa49 	bl	800107e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bec:	201c      	movs	r0, #28
 8000bee:	f000 fa62 	bl	80010b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <HAL_UART_MspInit+0x8c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d130      	bne.n	8000c84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <HAL_UART_MspInit+0x90>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	4a1a      	ldr	r2, [pc, #104]	; (8000c90 <HAL_UART_MspInit+0x90>)
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_UART_MspInit+0x90>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_UART_MspInit+0x90>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <HAL_UART_MspInit+0x90>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_UART_MspInit+0x90>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = U2_TX_Pin|U2_RX_Pin;
 8000c52:	230c      	movs	r3, #12
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c62:	2307      	movs	r3, #7
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f000 fa7c 	bl	800116c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	2026      	movs	r0, #38	; 0x26
 8000c7a:	f000 fa00 	bl	800107e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c7e:	2026      	movs	r0, #38	; 0x26
 8000c80:	f000 fa19 	bl	80010b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40004400 	.word	0x40004400
 8000c90:	40021000 	.word	0x40021000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 f8d0 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <TIM2_IRQHandler+0x10>)
 8000cf6:	f001 ff65 	bl	8002bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000034 	.word	0x20000034

08000d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <USART2_IRQHandler+0x10>)
 8000d0a:	f002 fc17 	bl	800353c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000074 	.word	0x20000074

08000d18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d20:	f000 fbe4 	bl	80014ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <SystemInit+0x64>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d32:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <SystemInit+0x64>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <SystemInit+0x68>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <SystemInit+0x68>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <SystemInit+0x68>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <SystemInit+0x68>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <SystemInit+0x68>)
 8000d54:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d58:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <SystemInit+0x68>)
 8000d60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d64:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <SystemInit+0x68>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <SystemInit+0x68>)
 8000d6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <SystemInit+0x68>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SystemInit+0x64>)
 8000d7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00
 8000d90:	40021000 	.word	0x40021000

08000d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d9a:	e003      	b.n	8000da4 <LoopCopyDataInit>

08000d9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000da0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000da2:	3104      	adds	r1, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000da8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000daa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dac:	d3f6      	bcc.n	8000d9c <CopyDataInit>
	ldr	r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000db0:	e002      	b.n	8000db8 <LoopFillZerobss>

08000db2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000db2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000db4:	f842 3b04 	str.w	r3, [r2], #4

08000db8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <LoopForever+0x16>)
	cmp	r2, r3
 8000dba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000dbc:	d3f9      	bcc.n	8000db2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dbe:	f7ff ffb3 	bl	8000d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f003 fa43 	bl	800424c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dc6:	f7ff fd75 	bl	80008b4 <main>

08000dca <LoopForever>:

LoopForever:
    b LoopForever
 8000dca:	e7fe      	b.n	8000dca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dcc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000dd0:	08004364 	.word	0x08004364
	ldr	r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000dd8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ddc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000de0:	200000f8 	.word	0x200000f8

08000de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC1_2_IRQHandler>

08000de6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f939 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f80e 	bl	8000e18 <HAL_InitTick>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	e001      	b.n	8000e0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e08:	f7ff feb2 	bl	8000b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_InitTick+0x68>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d022      	beq.n	8000e72 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_InitTick+0x6c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_InitTick+0x68>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f946 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10f      	bne.n	8000e6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b0f      	cmp	r3, #15
 8000e50:	d809      	bhi.n	8000e66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e52:	2200      	movs	r2, #0
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5a:	f000 f910 	bl	800107e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_InitTick+0x70>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e007      	b.n	8000e76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
 8000e6a:	e004      	b.n	8000e76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	e001      	b.n	8000e76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_IncTick+0x1c>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_IncTick+0x20>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a03      	ldr	r2, [pc, #12]	; (8000ea8 <HAL_IncTick+0x1c>)
 8000e9c:	6013      	str	r3, [r2, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	200000f4 	.word	0x200000f4
 8000eac:	20000008 	.word	0x20000008

08000eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_GetTick+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200000f4 	.word	0x200000f4

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	; (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff29 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff3e 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff8e 	bl	8000fbc <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5d 	bl	8000f68 <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff31 	bl	8000f2c <__NVIC_EnableIRQ>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffa2 	bl	8001024 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d005      	beq.n	800110e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2204      	movs	r2, #4
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e029      	b.n	8001162 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 020e 	bic.w	r2, r2, #14
 800111c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0201 	bic.w	r2, r2, #1
 800112c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f003 021c 	and.w	r2, r3, #28
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2101      	movs	r1, #1
 800113c:	fa01 f202 	lsl.w	r2, r1, r2
 8001140:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	4798      	blx	r3
    }
  }
  return status;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	e17f      	b.n	800147c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8171 	beq.w	8001476 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d00b      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d007      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a8:	2b11      	cmp	r3, #17
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b12      	cmp	r3, #18
 80011b2:	d130      	bne.n	8001216 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ea:	2201      	movs	r2, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 0201 	and.w	r2, r3, #1
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b03      	cmp	r3, #3
 8001220:	d118      	bne.n	8001254 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	08db      	lsrs	r3, r3, #3
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x128>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b12      	cmp	r3, #18
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80ac 	beq.w	8001476 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	4b5e      	ldr	r3, [pc, #376]	; (8001498 <HAL_GPIO_Init+0x32c>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001322:	4a5d      	ldr	r2, [pc, #372]	; (8001498 <HAL_GPIO_Init+0x32c>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6613      	str	r3, [r2, #96]	; 0x60
 800132a:	4b5b      	ldr	r3, [pc, #364]	; (8001498 <HAL_GPIO_Init+0x32c>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001336:	4a59      	ldr	r2, [pc, #356]	; (800149c <HAL_GPIO_Init+0x330>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x242>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4e      	ldr	r2, [pc, #312]	; (80014a0 <HAL_GPIO_Init+0x334>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x23e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4d      	ldr	r2, [pc, #308]	; (80014a4 <HAL_GPIO_Init+0x338>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x23a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4c      	ldr	r2, [pc, #304]	; (80014a8 <HAL_GPIO_Init+0x33c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x236>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4b      	ldr	r2, [pc, #300]	; (80014ac <HAL_GPIO_Init+0x340>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x232>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4a      	ldr	r2, [pc, #296]	; (80014b0 <HAL_GPIO_Init+0x344>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x22e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a49      	ldr	r2, [pc, #292]	; (80014b4 <HAL_GPIO_Init+0x348>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x22a>
 8001392:	2306      	movs	r3, #6
 8001394:	e00c      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 8001396:	2307      	movs	r3, #7
 8001398:	e00a      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 800139a:	2305      	movs	r3, #5
 800139c:	e008      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 800139e:	2304      	movs	r3, #4
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e004      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013ae:	2300      	movs	r3, #0
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4093      	lsls	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013c0:	4936      	ldr	r1, [pc, #216]	; (800149c <HAL_GPIO_Init+0x330>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013ce:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013f2:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800141c:	4a26      	ldr	r2, [pc, #152]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001446:	4a1c      	ldr	r2, [pc, #112]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001470:	4a11      	ldr	r2, [pc, #68]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	f47f ae78 	bne.w	800117c <HAL_GPIO_Init+0x10>
  }
}
 800148c:	bf00      	nop
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000
 80014a0:	48000400 	.word	0x48000400
 80014a4:	48000800 	.word	0x48000800
 80014a8:	48000c00 	.word	0x48000c00
 80014ac:	48001000 	.word	0x48001000
 80014b0:	48001400 	.word	0x48001400
 80014b4:	48001800 	.word	0x48001800
 80014b8:	40010400 	.word	0x40010400

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014d8:	e002      	b.n	80014e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d006      	beq.n	8001510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ffdc 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40010400 	.word	0x40010400

0800151c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <HAL_PWREx_GetVoltageRange+0x18>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40007000 	.word	0x40007000

08001538 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001546:	d130      	bne.n	80015aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001548:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001554:	d038      	beq.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800155e:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2232      	movs	r2, #50	; 0x32
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	0c9b      	lsrs	r3, r3, #18
 8001578:	3301      	adds	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800157c:	e002      	b.n	8001584 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3b01      	subs	r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001590:	d102      	bne.n	8001598 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f2      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a4:	d110      	bne.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e00f      	b.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b6:	d007      	beq.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015c0:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40007000 	.word	0x40007000
 80015dc:	20000000 	.word	0x20000000
 80015e0:	431bde83 	.word	0x431bde83

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e3d4      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f6:	4ba1      	ldr	r3, [pc, #644]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001600:	4b9e      	ldr	r3, [pc, #632]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80e4 	beq.w	80017e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d007      	beq.n	800162e <HAL_RCC_OscConfig+0x4a>
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	2b0c      	cmp	r3, #12
 8001622:	f040 808b 	bne.w	800173c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2b01      	cmp	r3, #1
 800162a:	f040 8087 	bne.w	800173c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800162e:	4b93      	ldr	r3, [pc, #588]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_RCC_OscConfig+0x62>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e3ac      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1a      	ldr	r2, [r3, #32]
 800164a:	4b8c      	ldr	r3, [pc, #560]	; (800187c <HAL_RCC_OscConfig+0x298>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <HAL_RCC_OscConfig+0x7c>
 8001656:	4b89      	ldr	r3, [pc, #548]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800165e:	e005      	b.n	800166c <HAL_RCC_OscConfig+0x88>
 8001660:	4b86      	ldr	r3, [pc, #536]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800166c:	4293      	cmp	r3, r2
 800166e:	d223      	bcs.n	80016b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fd3f 	bl	80020f8 <RCC_SetFlashLatencyFromMSIRange>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e38d      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001684:	4b7d      	ldr	r3, [pc, #500]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a7c      	ldr	r2, [pc, #496]	; (800187c <HAL_RCC_OscConfig+0x298>)
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b7a      	ldr	r3, [pc, #488]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4977      	ldr	r1, [pc, #476]	; (800187c <HAL_RCC_OscConfig+0x298>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a2:	4b76      	ldr	r3, [pc, #472]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	4972      	ldr	r1, [pc, #456]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]
 80016b6:	e025      	b.n	8001704 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b8:	4b70      	ldr	r3, [pc, #448]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a6f      	ldr	r2, [pc, #444]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b6d      	ldr	r3, [pc, #436]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	496a      	ldr	r1, [pc, #424]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d6:	4b69      	ldr	r3, [pc, #420]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	4965      	ldr	r1, [pc, #404]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fcff 	bl	80020f8 <RCC_SetFlashLatencyFromMSIRange>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e34d      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001704:	f000 fc36 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001708:	4601      	mov	r1, r0
 800170a:	4b5c      	ldr	r3, [pc, #368]	; (800187c <HAL_RCC_OscConfig+0x298>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	4a5a      	ldr	r2, [pc, #360]	; (8001880 <HAL_RCC_OscConfig+0x29c>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	fa21 f303 	lsr.w	r3, r1, r3
 8001720:	4a58      	ldr	r2, [pc, #352]	; (8001884 <HAL_RCC_OscConfig+0x2a0>)
 8001722:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001724:	4b58      	ldr	r3, [pc, #352]	; (8001888 <HAL_RCC_OscConfig+0x2a4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fb75 	bl	8000e18 <HAL_InitTick>
 800172e:	4603      	mov	r3, r0
 8001730:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d052      	beq.n	80017de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	e331      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d032      	beq.n	80017aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001744:	4b4d      	ldr	r3, [pc, #308]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a4c      	ldr	r2, [pc, #304]	; (800187c <HAL_RCC_OscConfig+0x298>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001750:	f7ff fbae 	bl	8000eb0 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001758:	f7ff fbaa 	bl	8000eb0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e31a      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800176a:	4b44      	ldr	r3, [pc, #272]	; (800187c <HAL_RCC_OscConfig+0x298>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a40      	ldr	r2, [pc, #256]	; (800187c <HAL_RCC_OscConfig+0x298>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b3e      	ldr	r3, [pc, #248]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	493b      	ldr	r1, [pc, #236]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001794:	4b39      	ldr	r3, [pc, #228]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	4936      	ldr	r1, [pc, #216]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
 80017a8:	e01a      	b.n	80017e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a33      	ldr	r2, [pc, #204]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017b6:	f7ff fb7b 	bl	8000eb0 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017be:	f7ff fb77 	bl	8000eb0 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e2e7      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <HAL_RCC_OscConfig+0x298>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x1da>
 80017dc:	e000      	b.n	80017e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d074      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d005      	beq.n	80017fe <HAL_RCC_OscConfig+0x21a>
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d10e      	bne.n	8001816 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d10b      	bne.n	8001816 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d064      	beq.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d160      	bne.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e2c4      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181e:	d106      	bne.n	800182e <HAL_RCC_OscConfig+0x24a>
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a15      	ldr	r2, [pc, #84]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	e01d      	b.n	800186a <HAL_RCC_OscConfig+0x286>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001836:	d10c      	bne.n	8001852 <HAL_RCC_OscConfig+0x26e>
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_RCC_OscConfig+0x298>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_RCC_OscConfig+0x298>)
 800183e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0c      	ldr	r2, [pc, #48]	; (800187c <HAL_RCC_OscConfig+0x298>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e00b      	b.n	800186a <HAL_RCC_OscConfig+0x286>
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a06      	ldr	r2, [pc, #24]	; (800187c <HAL_RCC_OscConfig+0x298>)
 8001864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01c      	beq.n	80018ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001872:	f7ff fb1d 	bl	8000eb0 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001878:	e011      	b.n	800189e <HAL_RCC_OscConfig+0x2ba>
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	0800430c 	.word	0x0800430c
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fb10 	bl	8000eb0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e280      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189e:	4baf      	ldr	r3, [pc, #700]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x2a8>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fb00 	bl	8000eb0 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff fafc 	bl	8000eb0 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e26c      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c6:	4ba5      	ldr	r3, [pc, #660]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2d0>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d060      	beq.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_OscConfig+0x310>
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d119      	bne.n	8001922 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d116      	bne.n	8001922 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	4b99      	ldr	r3, [pc, #612]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x328>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e249      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b93      	ldr	r3, [pc, #588]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	4990      	ldr	r1, [pc, #576]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001920:	e040      	b.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d023      	beq.n	8001972 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800192a:	4b8c      	ldr	r3, [pc, #560]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a8b      	ldr	r2, [pc, #556]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff fabb 	bl	8000eb0 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193e:	f7ff fab7 	bl	8000eb0 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e227      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001950:	4b82      	ldr	r3, [pc, #520]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195c:	4b7f      	ldr	r3, [pc, #508]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	061b      	lsls	r3, r3, #24
 800196a:	497c      	ldr	r1, [pc, #496]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
 8001970:	e018      	b.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001972:	4b7a      	ldr	r3, [pc, #488]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a79      	ldr	r2, [pc, #484]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800197c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7ff fa97 	bl	8000eb0 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001986:	f7ff fa93 	bl	8000eb0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e203      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001998:	4b70      	ldr	r3, [pc, #448]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d03c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d01c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 80019ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019be:	4a67      	ldr	r2, [pc, #412]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff fa72 	bl	8000eb0 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d0:	f7ff fa6e 	bl	8000eb0 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1de      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e2:	4b5e      	ldr	r3, [pc, #376]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 80019e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0ef      	beq.n	80019d0 <HAL_RCC_OscConfig+0x3ec>
 80019f0:	e01b      	b.n	8001a2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f2:	4b5a      	ldr	r3, [pc, #360]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 80019f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f8:	4a58      	ldr	r2, [pc, #352]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff fa55 	bl	8000eb0 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0a:	f7ff fa51 	bl	8000eb0 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1c1      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a1c:	4b4f      	ldr	r3, [pc, #316]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ef      	bne.n	8001a0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80a6 	beq.w	8001b84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a3c:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10d      	bne.n	8001a64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a48:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	4a43      	ldr	r2, [pc, #268]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a52:	6593      	str	r3, [r2, #88]	; 0x58
 8001a54:	4b41      	ldr	r3, [pc, #260]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a60:	2301      	movs	r3, #1
 8001a62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a64:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <HAL_RCC_OscConfig+0x57c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d118      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a70:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_RCC_OscConfig+0x57c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a3a      	ldr	r2, [pc, #232]	; (8001b60 <HAL_RCC_OscConfig+0x57c>)
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fa18 	bl	8000eb0 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a84:	f7ff fa14 	bl	8000eb0 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e184      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a96:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <HAL_RCC_OscConfig+0x57c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d108      	bne.n	8001abc <HAL_RCC_OscConfig+0x4d8>
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab0:	4a2a      	ldr	r2, [pc, #168]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aba:	e024      	b.n	8001b06 <HAL_RCC_OscConfig+0x522>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d110      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x502>
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae4:	e00f      	b.n	8001b06 <HAL_RCC_OscConfig+0x522>
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aec:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001afe:	f023 0304 	bic.w	r3, r3, #4
 8001b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d016      	beq.n	8001b3c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f9cf 	bl	8000eb0 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7ff f9cb 	bl	8000eb0 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e139      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_OscConfig+0x578>)
 8001b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0ed      	beq.n	8001b16 <HAL_RCC_OscConfig+0x532>
 8001b3a:	e01a      	b.n	8001b72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f9b8 	bl	8000eb0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b42:	e00f      	b.n	8001b64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f9b4 	bl	8000eb0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d906      	bls.n	8001b64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e122      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b64:	4b90      	ldr	r3, [pc, #576]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1e8      	bne.n	8001b44 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b72:	7ffb      	ldrb	r3, [r7, #31]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b78:	4b8b      	ldr	r3, [pc, #556]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	4a8a      	ldr	r2, [pc, #552]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8108 	beq.w	8001d9e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	f040 80d0 	bne.w	8001d38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b98:	4b83      	ldr	r3, [pc, #524]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f003 0203 	and.w	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d130      	bne.n	8001c0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d127      	bne.n	8001c0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d11f      	bne.n	8001c0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bd8:	2a07      	cmp	r2, #7
 8001bda:	bf14      	ite	ne
 8001bdc:	2201      	movne	r2, #1
 8001bde:	2200      	moveq	r2, #0
 8001be0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d113      	bne.n	8001c0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d06e      	beq.n	8001cec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b0c      	cmp	r3, #12
 8001c12:	d069      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c14:	4b64      	ldr	r3, [pc, #400]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c20:	4b61      	ldr	r3, [pc, #388]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b7      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c30:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a5c      	ldr	r2, [pc, #368]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c3c:	f7ff f938 	bl	8000eb0 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c44:	f7ff f934 	bl	8000eb0 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e0a4      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c56:	4b54      	ldr	r3, [pc, #336]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c62:	4b51      	ldr	r3, [pc, #324]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	4b51      	ldr	r3, [pc, #324]	; (8001dac <HAL_RCC_OscConfig+0x7c8>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c72:	3a01      	subs	r2, #1
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c7c:	0212      	lsls	r2, r2, #8
 8001c7e:	4311      	orrs	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c84:	0852      	lsrs	r2, r2, #1
 8001c86:	3a01      	subs	r2, #1
 8001c88:	0552      	lsls	r2, r2, #21
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c90:	0852      	lsrs	r2, r2, #1
 8001c92:	3a01      	subs	r2, #1
 8001c94:	0652      	lsls	r2, r2, #25
 8001c96:	4311      	orrs	r1, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c9c:	0912      	lsrs	r2, r2, #4
 8001c9e:	0452      	lsls	r2, r2, #17
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	4941      	ldr	r1, [pc, #260]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a3e      	ldr	r2, [pc, #248]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb4:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4a3b      	ldr	r2, [pc, #236]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cc0:	f7ff f8f6 	bl	8000eb0 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff f8f2 	bl	8000eb0 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e062      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cda:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce6:	e05a      	b.n	8001d9e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e059      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cec:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d152      	bne.n	8001d9e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d10:	f7ff f8ce 	bl	8000eb0 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f8ca 	bl	8000eb0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e03a      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x734>
 8001d36:	e032      	b.n	8001d9e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d02d      	beq.n	8001d9a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001d44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d48:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001d5c:	f023 0303 	bic.w	r3, r3, #3
 8001d60:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001d68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d70:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff f89d 	bl	8000eb0 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7ff f899 	bl	8000eb0 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e009      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_RCC_OscConfig+0x7c4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x796>
 8001d98:	e001      	b.n	8001d9e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	f99d808c 	.word	0xf99d808c

08001db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0c8      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <HAL_RCC_ClockConfig+0x1b0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d910      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1b0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 0207 	bic.w	r2, r3, #7
 8001dda:	4961      	ldr	r1, [pc, #388]	; (8001f60 <HAL_RCC_ClockConfig+0x1b0>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b5f      	ldr	r3, [pc, #380]	; (8001f60 <HAL_RCC_ClockConfig+0x1b0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0b0      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d04c      	beq.n	8001e9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d107      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e08:	4b56      	ldr	r3, [pc, #344]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d121      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e09e      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e20:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d115      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e092      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e38:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e086      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e48:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e07e      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e58:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 0203 	bic.w	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	493f      	ldr	r1, [pc, #252]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e6a:	f7ff f821 	bl	8000eb0 <HAL_GetTick>
 8001e6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e72:	f7ff f81d 	bl	8000eb0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e066      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e88:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 020c 	and.w	r2, r3, #12
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d1eb      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	492c      	ldr	r1, [pc, #176]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <HAL_RCC_ClockConfig+0x1b0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d210      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <HAL_RCC_ClockConfig+0x1b0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4924      	ldr	r1, [pc, #144]	; (8001f60 <HAL_RCC_ClockConfig+0x1b0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCC_ClockConfig+0x1b0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e036      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4918      	ldr	r1, [pc, #96]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4910      	ldr	r1, [pc, #64]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f26:	f000 f825 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f2a:	4601      	mov	r1, r0
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_RCC_ClockConfig+0x1b4>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe ff64 	bl	8000e18 <HAL_InitTick>
 8001f50:	4603      	mov	r3, r0
 8001f52:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f54:	7afb      	ldrb	r3, [r7, #11]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40022000 	.word	0x40022000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	0800430c 	.word	0x0800430c
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20000004 	.word	0x20000004

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f82:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d121      	bne.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d11e      	bne.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fa8:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_RCC_GetSysClockFreq+0x104>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fb4:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e005      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fd0:	4a2a      	ldr	r2, [pc, #168]	; (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10d      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d102      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	e004      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ffa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d133      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_RCC_GetSysClockFreq+0x104>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d002      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0xa4>
 8002012:	2b03      	cmp	r3, #3
 8002014:	d003      	beq.n	800201e <HAL_RCC_GetSysClockFreq+0xaa>
 8002016:	e005      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_GetSysClockFreq+0x10c>)
 800201a:	617b      	str	r3, [r7, #20]
      break;
 800201c:	e005      	b.n	800202a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_RCC_GetSysClockFreq+0x110>)
 8002020:	617b      	str	r3, [r7, #20]
      break;
 8002022:	e002      	b.n	800202a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	617b      	str	r3, [r7, #20]
      break;
 8002028:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_RCC_GetSysClockFreq+0x104>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	3301      	adds	r3, #1
 8002036:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_RCC_GetSysClockFreq+0x104>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	fb02 f203 	mul.w	r2, r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_GetSysClockFreq+0x104>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0e5b      	lsrs	r3, r3, #25
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	3301      	adds	r3, #1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800206a:	69bb      	ldr	r3, [r7, #24]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3724      	adds	r7, #36	; 0x24
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40021000 	.word	0x40021000
 800207c:	08004324 	.word	0x08004324
 8002080:	00f42400 	.word	0x00f42400
 8002084:	007a1200 	.word	0x007a1200

08002088 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_RCC_GetHCLKFreq+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000000 	.word	0x20000000

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020a4:	f7ff fff0 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a8:	4601      	mov	r1, r0
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	0800431c 	.word	0x0800431c

080020cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020d0:	f7ff ffda 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020d4:	4601      	mov	r1, r0
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	0adb      	lsrs	r3, r3, #11
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	0800431c 	.word	0x0800431c

080020f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002110:	f7ff fa04 	bl	800151c <HAL_PWREx_GetVoltageRange>
 8002114:	6178      	str	r0, [r7, #20]
 8002116:	e014      	b.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002122:	6593      	str	r3, [r2, #88]	; 0x58
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002130:	f7ff f9f4 	bl	800151c <HAL_PWREx_GetVoltageRange>
 8002134:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002140:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002148:	d10b      	bne.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d919      	bls.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2ba0      	cmp	r3, #160	; 0xa0
 8002154:	d902      	bls.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002156:	2302      	movs	r3, #2
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	e013      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800215c:	2301      	movs	r3, #1
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e010      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b80      	cmp	r3, #128	; 0x80
 8002166:	d902      	bls.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002168:	2303      	movs	r3, #3
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e00a      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d102      	bne.n	800217a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002174:	2302      	movs	r3, #2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e004      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b70      	cmp	r3, #112	; 0x70
 800217e:	d101      	bne.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002180:	2301      	movs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 0207 	bic.w	r2, r3, #7
 800218c:	4909      	ldr	r1, [pc, #36]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021c0:	2300      	movs	r3, #0
 80021c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021c4:	2300      	movs	r3, #0
 80021c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d03f      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021dc:	d01c      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80021de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e2:	d802      	bhi.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00e      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80021e8:	e01f      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80021ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021ee:	d003      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80021f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021f4:	d01c      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80021f6:	e018      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021f8:	4b85      	ldr	r3, [pc, #532]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a84      	ldr	r2, [pc, #528]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002202:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002204:	e015      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fab9 	bl	8002784 <RCCEx_PLLSAI1_Config>
 8002212:	4603      	mov	r3, r0
 8002214:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002216:	e00c      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3320      	adds	r3, #32
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fba0 	bl	8002964 <RCCEx_PLLSAI2_Config>
 8002224:	4603      	mov	r3, r0
 8002226:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002228:	e003      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	74fb      	strb	r3, [r7, #19]
      break;
 800222e:	e000      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002232:	7cfb      	ldrb	r3, [r7, #19]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10b      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002238:	4b75      	ldr	r3, [pc, #468]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002246:	4972      	ldr	r1, [pc, #456]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800224e:	e001      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d03f      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002268:	d01c      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800226a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800226e:	d802      	bhi.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00e      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002274:	e01f      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800227a:	d003      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800227c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002280:	d01c      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002282:	e018      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002284:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a61      	ldr	r2, [pc, #388]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002290:	e015      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fa73 	bl	8002784 <RCCEx_PLLSAI1_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022a2:	e00c      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3320      	adds	r3, #32
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fb5a 	bl	8002964 <RCCEx_PLLSAI2_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022b4:	e003      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	74fb      	strb	r3, [r7, #19]
      break;
 80022ba:	e000      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80022bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022be:	7cfb      	ldrb	r3, [r7, #19]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022c4:	4b52      	ldr	r3, [pc, #328]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022d2:	494f      	ldr	r1, [pc, #316]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022da:	e001      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a0 	beq.w	800242e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002302:	2300      	movs	r3, #0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00d      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	4a40      	ldr	r2, [pc, #256]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800230e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002312:	6593      	str	r3, [r2, #88]	; 0x58
 8002314:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002320:	2301      	movs	r3, #1
 8002322:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002324:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a3a      	ldr	r2, [pc, #232]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002330:	f7fe fdbe 	bl	8000eb0 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002336:	e009      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002338:	f7fe fdba 	bl	8000eb0 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d902      	bls.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	74fb      	strb	r3, [r7, #19]
        break;
 800234a:	e005      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800234c:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ef      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d15c      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800235e:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002368:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01f      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	d019      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800237c:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002386:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	4a20      	ldr	r2, [pc, #128]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023a8:	4a19      	ldr	r2, [pc, #100]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d016      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7fe fd79 	bl	8000eb0 <HAL_GetTick>
 80023be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c0:	e00b      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe fd75 	bl	8000eb0 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d902      	bls.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	74fb      	strb	r3, [r7, #19]
            break;
 80023d8:	e006      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ec      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10c      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023fe:	4904      	ldr	r1, [pc, #16]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002406:	e009      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	74bb      	strb	r3, [r7, #18]
 800240c:	e006      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800241c:	7c7b      	ldrb	r3, [r7, #17]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4b9e      	ldr	r3, [pc, #632]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	4a9d      	ldr	r2, [pc, #628]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800243a:	4b98      	ldr	r3, [pc, #608]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002440:	f023 0203 	bic.w	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	4994      	ldr	r1, [pc, #592]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800245c:	4b8f      	ldr	r3, [pc, #572]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f023 020c 	bic.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	498c      	ldr	r1, [pc, #560]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800247e:	4b87      	ldr	r3, [pc, #540]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	4983      	ldr	r1, [pc, #524]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024a0:	4b7e      	ldr	r3, [pc, #504]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	497b      	ldr	r1, [pc, #492]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024c2:	4b76      	ldr	r3, [pc, #472]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d0:	4972      	ldr	r1, [pc, #456]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024e4:	4b6d      	ldr	r3, [pc, #436]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	496a      	ldr	r1, [pc, #424]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002506:	4b65      	ldr	r3, [pc, #404]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	4961      	ldr	r1, [pc, #388]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002528:	4b5c      	ldr	r3, [pc, #368]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002536:	4959      	ldr	r1, [pc, #356]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800254a:	4b54      	ldr	r3, [pc, #336]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002558:	4950      	ldr	r1, [pc, #320]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800256c:	4b4b      	ldr	r3, [pc, #300]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	4948      	ldr	r1, [pc, #288]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800258e:	4b43      	ldr	r3, [pc, #268]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	493f      	ldr	r1, [pc, #252]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d028      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025b0:	4b3a      	ldr	r3, [pc, #232]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025be:	4937      	ldr	r1, [pc, #220]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ce:	d106      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a31      	ldr	r2, [pc, #196]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025da:	60d3      	str	r3, [r2, #12]
 80025dc:	e011      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025e6:	d10c      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3304      	adds	r3, #4
 80025ec:	2101      	movs	r1, #1
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f8c8 	bl	8002784 <RCCEx_PLLSAI1_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d028      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800260e:	4b23      	ldr	r3, [pc, #140]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002614:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	491f      	ldr	r1, [pc, #124]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800262c:	d106      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4a1a      	ldr	r2, [pc, #104]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002638:	60d3      	str	r3, [r2, #12]
 800263a:	e011      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002644:	d10c      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	2101      	movs	r1, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f899 	bl	8002784 <RCCEx_PLLSAI1_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02b      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267a:	4908      	ldr	r1, [pc, #32]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800268a:	d109      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a02      	ldr	r2, [pc, #8]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002696:	60d3      	str	r3, [r2, #12]
 8002698:	e014      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2101      	movs	r1, #1
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 f867 	bl	8002784 <RCCEx_PLLSAI1_Config>
 80026b6:	4603      	mov	r3, r0
 80026b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80026c0:	7cfb      	ldrb	r3, [r7, #19]
 80026c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d02f      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026d0:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026de:	4928      	ldr	r1, [pc, #160]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ee:	d10d      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3304      	adds	r3, #4
 80026f4:	2102      	movs	r1, #2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f844 	bl	8002784 <RCCEx_PLLSAI1_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d014      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	74bb      	strb	r3, [r7, #18]
 800270a:	e011      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002714:	d10c      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3320      	adds	r3, #32
 800271a:	2102      	movs	r1, #2
 800271c:	4618      	mov	r0, r3
 800271e:	f000 f921 	bl	8002964 <RCCEx_PLLSAI2_Config>
 8002722:	4603      	mov	r3, r0
 8002724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002726:	7cfb      	ldrb	r3, [r7, #19]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800274a:	490d      	ldr	r1, [pc, #52]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800276e:	4904      	ldr	r1, [pc, #16]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002776:	7cbb      	ldrb	r3, [r7, #18]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000

08002784 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002792:	4b73      	ldr	r3, [pc, #460]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d018      	beq.n	80027d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800279e:	4b70      	ldr	r3, [pc, #448]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0203 	and.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d10d      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
       ||
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027b6:	4b6a      	ldr	r3, [pc, #424]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
       ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d044      	beq.n	8002854 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e041      	b.n	8002854 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d00c      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0x6e>
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d013      	beq.n	8002804 <RCCEx_PLLSAI1_Config+0x80>
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d120      	bne.n	8002822 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027e0:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d11d      	bne.n	8002828 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f0:	e01a      	b.n	8002828 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027f2:	4b5b      	ldr	r3, [pc, #364]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d116      	bne.n	800282c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002802:	e013      	b.n	800282c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002804:	4b56      	ldr	r3, [pc, #344]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10f      	bne.n	8002830 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002810:	4b53      	ldr	r3, [pc, #332]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002820:	e006      	b.n	8002830 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
      break;
 8002826:	e004      	b.n	8002832 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002828:	bf00      	nop
 800282a:	e002      	b.n	8002832 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800282c:	bf00      	nop
 800282e:	e000      	b.n	8002832 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002830:	bf00      	nop
    }

    if(status == HAL_OK)
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10d      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002838:	4b49      	ldr	r3, [pc, #292]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	3b01      	subs	r3, #1
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	430b      	orrs	r3, r1
 800284e:	4944      	ldr	r1, [pc, #272]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002850:	4313      	orrs	r3, r2
 8002852:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d17d      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800285a:	4b41      	ldr	r3, [pc, #260]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a40      	ldr	r2, [pc, #256]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002860:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002866:	f7fe fb23 	bl	8000eb0 <HAL_GetTick>
 800286a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800286c:	e009      	b.n	8002882 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800286e:	f7fe fb1f 	bl	8000eb0 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d902      	bls.n	8002882 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	73fb      	strb	r3, [r7, #15]
        break;
 8002880:	e005      	b.n	800288e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002882:	4b37      	ldr	r3, [pc, #220]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1ef      	bne.n	800286e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d160      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d111      	bne.n	80028be <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800289a:	4b31      	ldr	r3, [pc, #196]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6892      	ldr	r2, [r2, #8]
 80028aa:	0211      	lsls	r1, r2, #8
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68d2      	ldr	r2, [r2, #12]
 80028b0:	0912      	lsrs	r2, r2, #4
 80028b2:	0452      	lsls	r2, r2, #17
 80028b4:	430a      	orrs	r2, r1
 80028b6:	492a      	ldr	r1, [pc, #168]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	610b      	str	r3, [r1, #16]
 80028bc:	e027      	b.n	800290e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d112      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6892      	ldr	r2, [r2, #8]
 80028d4:	0211      	lsls	r1, r2, #8
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6912      	ldr	r2, [r2, #16]
 80028da:	0852      	lsrs	r2, r2, #1
 80028dc:	3a01      	subs	r2, #1
 80028de:	0552      	lsls	r2, r2, #21
 80028e0:	430a      	orrs	r2, r1
 80028e2:	491f      	ldr	r1, [pc, #124]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	610b      	str	r3, [r1, #16]
 80028e8:	e011      	b.n	800290e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6892      	ldr	r2, [r2, #8]
 80028fa:	0211      	lsls	r1, r2, #8
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6952      	ldr	r2, [r2, #20]
 8002900:	0852      	lsrs	r2, r2, #1
 8002902:	3a01      	subs	r2, #1
 8002904:	0652      	lsls	r2, r2, #25
 8002906:	430a      	orrs	r2, r1
 8002908:	4915      	ldr	r1, [pc, #84]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002914:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002918:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291a:	f7fe fac9 	bl	8000eb0 <HAL_GetTick>
 800291e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002920:	e009      	b.n	8002936 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002922:	f7fe fac5 	bl	8000eb0 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d902      	bls.n	8002936 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	73fb      	strb	r3, [r7, #15]
          break;
 8002934:	e005      	b.n	8002942 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ef      	beq.n	8002922 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000

08002964 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002972:	4b68      	ldr	r3, [pc, #416]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d018      	beq.n	80029b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800297e:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0203 	and.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d10d      	bne.n	80029aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
       ||
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002996:	4b5f      	ldr	r3, [pc, #380]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
       ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d044      	beq.n	8002a34 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	e041      	b.n	8002a34 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d00c      	beq.n	80029d2 <RCCEx_PLLSAI2_Config+0x6e>
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d013      	beq.n	80029e4 <RCCEx_PLLSAI2_Config+0x80>
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d120      	bne.n	8002a02 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029c0:	4b54      	ldr	r3, [pc, #336]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11d      	bne.n	8002a08 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d0:	e01a      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029d2:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d116      	bne.n	8002a0c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e2:	e013      	b.n	8002a0c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029e4:	4b4b      	ldr	r3, [pc, #300]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10f      	bne.n	8002a10 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029f0:	4b48      	ldr	r3, [pc, #288]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a00:	e006      	b.n	8002a10 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
      break;
 8002a06:	e004      	b.n	8002a12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a08:	bf00      	nop
 8002a0a:	e002      	b.n	8002a12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a0c:	bf00      	nop
 8002a0e:	e000      	b.n	8002a12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a10:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10d      	bne.n	8002a34 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a18:	4b3e      	ldr	r3, [pc, #248]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6819      	ldr	r1, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	4939      	ldr	r1, [pc, #228]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d167      	bne.n	8002b0a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a3a:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a35      	ldr	r2, [pc, #212]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a46:	f7fe fa33 	bl	8000eb0 <HAL_GetTick>
 8002a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a4c:	e009      	b.n	8002a62 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a4e:	f7fe fa2f 	bl	8000eb0 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d902      	bls.n	8002a62 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	73fb      	strb	r3, [r7, #15]
        break;
 8002a60:	e005      	b.n	8002a6e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a62:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1ef      	bne.n	8002a4e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d14a      	bne.n	8002b0a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d111      	bne.n	8002a9e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6892      	ldr	r2, [r2, #8]
 8002a8a:	0211      	lsls	r1, r2, #8
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68d2      	ldr	r2, [r2, #12]
 8002a90:	0912      	lsrs	r2, r2, #4
 8002a92:	0452      	lsls	r2, r2, #17
 8002a94:	430a      	orrs	r2, r1
 8002a96:	491f      	ldr	r1, [pc, #124]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	614b      	str	r3, [r1, #20]
 8002a9c:	e011      	b.n	8002ac2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002aa6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6892      	ldr	r2, [r2, #8]
 8002aae:	0211      	lsls	r1, r2, #8
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6912      	ldr	r2, [r2, #16]
 8002ab4:	0852      	lsrs	r2, r2, #1
 8002ab6:	3a01      	subs	r2, #1
 8002ab8:	0652      	lsls	r2, r2, #25
 8002aba:	430a      	orrs	r2, r1
 8002abc:	4915      	ldr	r1, [pc, #84]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ace:	f7fe f9ef 	bl	8000eb0 <HAL_GetTick>
 8002ad2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ad4:	e009      	b.n	8002aea <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ad6:	f7fe f9eb 	bl	8000eb0 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d902      	bls.n	8002aea <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	73fb      	strb	r3, [r7, #15]
          break;
 8002ae8:	e005      	b.n	8002af6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0ef      	beq.n	8002ad6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d106      	bne.n	8002b0a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	4903      	ldr	r1, [pc, #12]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000

08002b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e01d      	b.n	8002b66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe f83a 	bl	8000bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f000 fa34 	bl	8002fc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <HAL_TIM_Base_Start_IT+0x50>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d00b      	beq.n	8002bb2 <HAL_TIM_Base_Start_IT+0x42>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d007      	beq.n	8002bb2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	00010007 	.word	0x00010007

08002bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d122      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d11b      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0202 	mvn.w	r2, #2
 8002bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f9be 	bl	8002f88 <HAL_TIM_IC_CaptureCallback>
 8002c0c:	e005      	b.n	8002c1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f9b0 	bl	8002f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f9c1 	bl	8002f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d122      	bne.n	8002c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d11b      	bne.n	8002c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0204 	mvn.w	r2, #4
 8002c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f994 	bl	8002f88 <HAL_TIM_IC_CaptureCallback>
 8002c60:	e005      	b.n	8002c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f986 	bl	8002f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f997 	bl	8002f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d122      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d11b      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0208 	mvn.w	r2, #8
 8002c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f96a 	bl	8002f88 <HAL_TIM_IC_CaptureCallback>
 8002cb4:	e005      	b.n	8002cc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f95c 	bl	8002f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f96d 	bl	8002f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b10      	cmp	r3, #16
 8002cd4:	d122      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d11b      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0210 	mvn.w	r2, #16
 8002cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f940 	bl	8002f88 <HAL_TIM_IC_CaptureCallback>
 8002d08:	e005      	b.n	8002d16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f932 	bl	8002f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f943 	bl	8002f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d10e      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d107      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0201 	mvn.w	r2, #1
 8002d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fd fbd0 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d52:	2b80      	cmp	r3, #128	; 0x80
 8002d54:	d10e      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b80      	cmp	r3, #128	; 0x80
 8002d62:	d107      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 faee 	bl	8003350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d82:	d10e      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b80      	cmp	r3, #128	; 0x80
 8002d90:	d107      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fae1 	bl	8003364 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d10e      	bne.n	8002dce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d107      	bne.n	8002dce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f8f1 	bl	8002fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d10e      	bne.n	8002dfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d107      	bne.n	8002dfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f06f 0220 	mvn.w	r2, #32
 8002df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 faa1 	bl	800333c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_TIM_ConfigClockSource+0x18>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e0a8      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x16a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e3c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e44:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d067      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x124>
 8002e56:	2b40      	cmp	r3, #64	; 0x40
 8002e58:	d80b      	bhi.n	8002e72 <HAL_TIM_ConfigClockSource+0x70>
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d073      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x144>
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d802      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x66>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d06f      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e66:	e078      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d06c      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x144>
 8002e6c:	2b30      	cmp	r3, #48	; 0x30
 8002e6e:	d06a      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002e70:	e073      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002e72:	2b70      	cmp	r3, #112	; 0x70
 8002e74:	d00d      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x90>
 8002e76:	2b70      	cmp	r3, #112	; 0x70
 8002e78:	d804      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x82>
 8002e7a:	2b50      	cmp	r3, #80	; 0x50
 8002e7c:	d033      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0xe4>
 8002e7e:	2b60      	cmp	r3, #96	; 0x60
 8002e80:	d041      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002e82:	e06a      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e88:	d066      	beq.n	8002f58 <HAL_TIM_ConfigClockSource+0x156>
 8002e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8e:	d017      	beq.n	8002ec0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002e90:	e063      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f000 f9a3 	bl	80031ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	609a      	str	r2, [r3, #8]
      break;
 8002ebe:	e04c      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	6899      	ldr	r1, [r3, #8]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f000 f98c 	bl	80031ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee2:	609a      	str	r2, [r3, #8]
      break;
 8002ee4:	e039      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f000 f900 	bl	80030f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2150      	movs	r1, #80	; 0x50
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f959 	bl	80031b6 <TIM_ITRx_SetConfig>
      break;
 8002f04:	e029      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f000 f91f 	bl	8003156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2160      	movs	r1, #96	; 0x60
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f949 	bl	80031b6 <TIM_ITRx_SetConfig>
      break;
 8002f24:	e019      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f000 f8e0 	bl	80030f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2140      	movs	r1, #64	; 0x40
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f939 	bl	80031b6 <TIM_ITRx_SetConfig>
      break;
 8002f44:	e009      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f000 f930 	bl	80031b6 <TIM_ITRx_SetConfig>
      break;
 8002f56:	e000      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002f58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <TIM_Base_SetConfig+0x114>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d013      	beq.n	8003004 <TIM_Base_SetConfig+0x40>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe2:	d00f      	beq.n	8003004 <TIM_Base_SetConfig+0x40>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a3d      	ldr	r2, [pc, #244]	; (80030dc <TIM_Base_SetConfig+0x118>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00b      	beq.n	8003004 <TIM_Base_SetConfig+0x40>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a3c      	ldr	r2, [pc, #240]	; (80030e0 <TIM_Base_SetConfig+0x11c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d007      	beq.n	8003004 <TIM_Base_SetConfig+0x40>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a3b      	ldr	r2, [pc, #236]	; (80030e4 <TIM_Base_SetConfig+0x120>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d003      	beq.n	8003004 <TIM_Base_SetConfig+0x40>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a3a      	ldr	r2, [pc, #232]	; (80030e8 <TIM_Base_SetConfig+0x124>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d108      	bne.n	8003016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a2f      	ldr	r2, [pc, #188]	; (80030d8 <TIM_Base_SetConfig+0x114>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d01f      	beq.n	800305e <TIM_Base_SetConfig+0x9a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003024:	d01b      	beq.n	800305e <TIM_Base_SetConfig+0x9a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <TIM_Base_SetConfig+0x118>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d017      	beq.n	800305e <TIM_Base_SetConfig+0x9a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a2b      	ldr	r2, [pc, #172]	; (80030e0 <TIM_Base_SetConfig+0x11c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d013      	beq.n	800305e <TIM_Base_SetConfig+0x9a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a2a      	ldr	r2, [pc, #168]	; (80030e4 <TIM_Base_SetConfig+0x120>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00f      	beq.n	800305e <TIM_Base_SetConfig+0x9a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a29      	ldr	r2, [pc, #164]	; (80030e8 <TIM_Base_SetConfig+0x124>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00b      	beq.n	800305e <TIM_Base_SetConfig+0x9a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a28      	ldr	r2, [pc, #160]	; (80030ec <TIM_Base_SetConfig+0x128>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <TIM_Base_SetConfig+0x9a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a27      	ldr	r2, [pc, #156]	; (80030f0 <TIM_Base_SetConfig+0x12c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d003      	beq.n	800305e <TIM_Base_SetConfig+0x9a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a26      	ldr	r2, [pc, #152]	; (80030f4 <TIM_Base_SetConfig+0x130>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d108      	bne.n	8003070 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <TIM_Base_SetConfig+0x114>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00f      	beq.n	80030bc <TIM_Base_SetConfig+0xf8>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a12      	ldr	r2, [pc, #72]	; (80030e8 <TIM_Base_SetConfig+0x124>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00b      	beq.n	80030bc <TIM_Base_SetConfig+0xf8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a11      	ldr	r2, [pc, #68]	; (80030ec <TIM_Base_SetConfig+0x128>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d007      	beq.n	80030bc <TIM_Base_SetConfig+0xf8>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a10      	ldr	r2, [pc, #64]	; (80030f0 <TIM_Base_SetConfig+0x12c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d003      	beq.n	80030bc <TIM_Base_SetConfig+0xf8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <TIM_Base_SetConfig+0x130>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d103      	bne.n	80030c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	615a      	str	r2, [r3, #20]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800
 80030e4:	40000c00 	.word	0x40000c00
 80030e8:	40013400 	.word	0x40013400
 80030ec:	40014000 	.word	0x40014000
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800

080030f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f023 0201 	bic.w	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f023 030a 	bic.w	r3, r3, #10
 8003134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	621a      	str	r2, [r3, #32]
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003156:	b480      	push	{r7}
 8003158:	b087      	sub	sp, #28
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	f023 0210 	bic.w	r2, r3, #16
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	031b      	lsls	r3, r3, #12
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003192:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	621a      	str	r2, [r3, #32]
}
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f043 0307 	orr.w	r3, r3, #7
 80031d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	609a      	str	r2, [r3, #8]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	021a      	lsls	r2, r3, #8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	431a      	orrs	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4313      	orrs	r3, r2
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	609a      	str	r2, [r3, #8]
}
 8003220:	bf00      	nop
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003240:	2302      	movs	r3, #2
 8003242:	e068      	b.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2e      	ldr	r2, [pc, #184]	; (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2d      	ldr	r2, [pc, #180]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d108      	bne.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800327e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003290:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01d      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b6:	d018      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00e      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d009      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a13      	ldr	r2, [pc, #76]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d004      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a14      	ldr	r2, [pc, #80]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10c      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40012c00 	.word	0x40012c00
 8003328:	40013400 	.word	0x40013400
 800332c:	40000400 	.word	0x40000400
 8003330:	40000800 	.word	0x40000800
 8003334:	40000c00 	.word	0x40000c00
 8003338:	40014000 	.word	0x40014000

0800333c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e040      	b.n	800340c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd fc30 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0201 	bic.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa1a 	bl	80037f0 <UART_SetConfig>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e022      	b.n	800340c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fd80 	bl	8003ed4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fe07 	bl	8004018 <UART_CheckIdleState>
 800340a:	4603      	mov	r3, r0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	; 0x28
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	2b20      	cmp	r3, #32
 800342a:	f040 8081 	bne.w	8003530 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_UART_Transmit+0x26>
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e079      	b.n	8003532 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_UART_Transmit+0x38>
 8003448:	2302      	movs	r3, #2
 800344a:	e072      	b.n	8003532 <HAL_UART_Transmit+0x11e>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2221      	movs	r2, #33	; 0x21
 800345e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003460:	f7fd fd26 	bl	8000eb0 <HAL_GetTick>
 8003464:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	88fa      	ldrh	r2, [r7, #6]
 800346a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	88fa      	ldrh	r2, [r7, #6]
 8003472:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347e:	d108      	bne.n	8003492 <HAL_UART_Transmit+0x7e>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d104      	bne.n	8003492 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	e003      	b.n	800349a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003496:	2300      	movs	r3, #0
 8003498:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80034a2:	e02d      	b.n	8003500 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fdf7 	bl	80040a2 <UART_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e039      	b.n	8003532 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10b      	bne.n	80034dc <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	881a      	ldrh	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d0:	b292      	uxth	r2, r2
 80034d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	3302      	adds	r3, #2
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e008      	b.n	80034ee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b292      	uxth	r2, r2
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	3301      	adds	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1cb      	bne.n	80034a4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2200      	movs	r2, #0
 8003514:	2140      	movs	r1, #64	; 0x40
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fdc3 	bl	80040a2 <UART_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e005      	b.n	8003532 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	e000      	b.n	8003532 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003530:	2302      	movs	r3, #2
  }
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d113      	bne.n	8003594 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00e      	beq.n	8003594 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8114 	beq.w	80037b2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
      }
      return;
 8003592:	e10e      	b.n	80037b2 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 80d6 	beq.w	8003748 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d105      	bne.n	80035b2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80cb 	beq.w	8003748 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00e      	beq.n	80035da <HAL_UART_IRQHandler+0x9e>
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2201      	movs	r2, #1
 80035cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00e      	beq.n	8003602 <HAL_UART_IRQHandler+0xc6>
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2202      	movs	r2, #2
 80035f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035fa:	f043 0204 	orr.w	r2, r3, #4
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <HAL_UART_IRQHandler+0xee>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2204      	movs	r2, #4
 800361c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003622:	f043 0202 	orr.w	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d104      	bne.n	8003648 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003644:	2b00      	cmp	r3, #0
 8003646:	d009      	beq.n	800365c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2208      	movs	r2, #8
 800364e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003654:	f043 0208 	orr.w	r2, r3, #8
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00f      	beq.n	8003686 <HAL_UART_IRQHandler+0x14a>
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003678:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800367e:	f043 0220 	orr.w	r2, r3, #32
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8093 	beq.w	80037b6 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00c      	beq.n	80036b4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d004      	beq.n	80036d2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d031      	beq.n	8003736 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fd60 	bl	8004198 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d123      	bne.n	800372e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d013      	beq.n	8003726 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003702:	4a30      	ldr	r2, [pc, #192]	; (80037c4 <HAL_UART_IRQHandler+0x288>)
 8003704:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd fced 	bl	80010ea <HAL_DMA_Abort_IT>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003720:	4610      	mov	r0, r2
 8003722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003724:	e00e      	b.n	8003744 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f858 	bl	80037dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372c:	e00a      	b.n	8003744 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f854 	bl	80037dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003734:	e006      	b.n	8003744 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f850 	bl	80037dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003742:	e038      	b.n	80037b6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003744:	bf00      	nop
    return;
 8003746:	e036      	b.n	80037b6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <HAL_UART_IRQHandler+0x232>
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003764:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fd65 	bl	8004236 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800376c:	e026      	b.n	80037bc <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003786:	2b00      	cmp	r3, #0
 8003788:	d017      	beq.n	80037ba <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
    }
    return;
 8003792:	e012      	b.n	80037ba <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00e      	beq.n	80037bc <HAL_UART_IRQHandler+0x280>
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d009      	beq.n	80037bc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fd2b 	bl	8004204 <UART_EndTransmit_IT>
    return;
 80037ae:	bf00      	nop
 80037b0:	e004      	b.n	80037bc <HAL_UART_IRQHandler+0x280>
      return;
 80037b2:	bf00      	nop
 80037b4:	e002      	b.n	80037bc <HAL_UART_IRQHandler+0x280>
    return;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <HAL_UART_IRQHandler+0x280>
    return;
 80037ba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	080041d9 	.word	0x080041d9

080037c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80037f4:	b08a      	sub	sp, #40	; 0x28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	4313      	orrs	r3, r2
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4bb8      	ldr	r3, [pc, #736]	; (8003b08 <UART_SetConfig+0x318>)
 8003826:	4013      	ands	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800382e:	430b      	orrs	r3, r1
 8003830:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4aae      	ldr	r2, [pc, #696]	; (8003b0c <UART_SetConfig+0x31c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385e:	4313      	orrs	r3, r2
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4aa5      	ldr	r2, [pc, #660]	; (8003b10 <UART_SetConfig+0x320>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d126      	bne.n	80038ce <UART_SetConfig+0xde>
 8003880:	4ba4      	ldr	r3, [pc, #656]	; (8003b14 <UART_SetConfig+0x324>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b03      	cmp	r3, #3
 800388c:	d81a      	bhi.n	80038c4 <UART_SetConfig+0xd4>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0xa4>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038a5 	.word	0x080038a5
 8003898:	080038b5 	.word	0x080038b5
 800389c:	080038ad 	.word	0x080038ad
 80038a0:	080038bd 	.word	0x080038bd
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038aa:	e105      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 80038ac:	2302      	movs	r3, #2
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b2:	e101      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 80038b4:	2304      	movs	r3, #4
 80038b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ba:	e0fd      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 80038bc:	2308      	movs	r3, #8
 80038be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c2:	e0f9      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 80038c4:	2310      	movs	r3, #16
 80038c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ca:	bf00      	nop
 80038cc:	e0f4      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a91      	ldr	r2, [pc, #580]	; (8003b18 <UART_SetConfig+0x328>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d138      	bne.n	800394a <UART_SetConfig+0x15a>
 80038d8:	4b8e      	ldr	r3, [pc, #568]	; (8003b14 <UART_SetConfig+0x324>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d82c      	bhi.n	8003940 <UART_SetConfig+0x150>
 80038e6:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <UART_SetConfig+0xfc>)
 80038e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ec:	08003921 	.word	0x08003921
 80038f0:	08003941 	.word	0x08003941
 80038f4:	08003941 	.word	0x08003941
 80038f8:	08003941 	.word	0x08003941
 80038fc:	08003931 	.word	0x08003931
 8003900:	08003941 	.word	0x08003941
 8003904:	08003941 	.word	0x08003941
 8003908:	08003941 	.word	0x08003941
 800390c:	08003929 	.word	0x08003929
 8003910:	08003941 	.word	0x08003941
 8003914:	08003941 	.word	0x08003941
 8003918:	08003941 	.word	0x08003941
 800391c:	08003939 	.word	0x08003939
 8003920:	2300      	movs	r3, #0
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003926:	e0c7      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003928:	2302      	movs	r3, #2
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392e:	e0c3      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003930:	2304      	movs	r3, #4
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003936:	e0bf      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003938:	2308      	movs	r3, #8
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393e:	e0bb      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003940:	2310      	movs	r3, #16
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003946:	bf00      	nop
 8003948:	e0b6      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a73      	ldr	r2, [pc, #460]	; (8003b1c <UART_SetConfig+0x32c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d125      	bne.n	80039a0 <UART_SetConfig+0x1b0>
 8003954:	4b6f      	ldr	r3, [pc, #444]	; (8003b14 <UART_SetConfig+0x324>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800395e:	2b10      	cmp	r3, #16
 8003960:	d011      	beq.n	8003986 <UART_SetConfig+0x196>
 8003962:	2b10      	cmp	r3, #16
 8003964:	d802      	bhi.n	800396c <UART_SetConfig+0x17c>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <UART_SetConfig+0x186>
 800396a:	e014      	b.n	8003996 <UART_SetConfig+0x1a6>
 800396c:	2b20      	cmp	r3, #32
 800396e:	d006      	beq.n	800397e <UART_SetConfig+0x18e>
 8003970:	2b30      	cmp	r3, #48	; 0x30
 8003972:	d00c      	beq.n	800398e <UART_SetConfig+0x19e>
 8003974:	e00f      	b.n	8003996 <UART_SetConfig+0x1a6>
 8003976:	2300      	movs	r3, #0
 8003978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397c:	e09c      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 800397e:	2302      	movs	r3, #2
 8003980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003984:	e098      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003986:	2304      	movs	r3, #4
 8003988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398c:	e094      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 800398e:	2308      	movs	r3, #8
 8003990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003994:	e090      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003996:	2310      	movs	r3, #16
 8003998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399c:	bf00      	nop
 800399e:	e08b      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a5e      	ldr	r2, [pc, #376]	; (8003b20 <UART_SetConfig+0x330>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d125      	bne.n	80039f6 <UART_SetConfig+0x206>
 80039aa:	4b5a      	ldr	r3, [pc, #360]	; (8003b14 <UART_SetConfig+0x324>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d011      	beq.n	80039dc <UART_SetConfig+0x1ec>
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d802      	bhi.n	80039c2 <UART_SetConfig+0x1d2>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <UART_SetConfig+0x1dc>
 80039c0:	e014      	b.n	80039ec <UART_SetConfig+0x1fc>
 80039c2:	2b80      	cmp	r3, #128	; 0x80
 80039c4:	d006      	beq.n	80039d4 <UART_SetConfig+0x1e4>
 80039c6:	2bc0      	cmp	r3, #192	; 0xc0
 80039c8:	d00c      	beq.n	80039e4 <UART_SetConfig+0x1f4>
 80039ca:	e00f      	b.n	80039ec <UART_SetConfig+0x1fc>
 80039cc:	2300      	movs	r3, #0
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d2:	e071      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 80039d4:	2302      	movs	r3, #2
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039da:	e06d      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 80039dc:	2304      	movs	r3, #4
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e2:	e069      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 80039e4:	2308      	movs	r3, #8
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ea:	e065      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 80039ec:	2310      	movs	r3, #16
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f2:	bf00      	nop
 80039f4:	e060      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4a      	ldr	r2, [pc, #296]	; (8003b24 <UART_SetConfig+0x334>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d129      	bne.n	8003a54 <UART_SetConfig+0x264>
 8003a00:	4b44      	ldr	r3, [pc, #272]	; (8003b14 <UART_SetConfig+0x324>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0e:	d014      	beq.n	8003a3a <UART_SetConfig+0x24a>
 8003a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a14:	d802      	bhi.n	8003a1c <UART_SetConfig+0x22c>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <UART_SetConfig+0x23a>
 8003a1a:	e016      	b.n	8003a4a <UART_SetConfig+0x25a>
 8003a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a20:	d007      	beq.n	8003a32 <UART_SetConfig+0x242>
 8003a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a26:	d00c      	beq.n	8003a42 <UART_SetConfig+0x252>
 8003a28:	e00f      	b.n	8003a4a <UART_SetConfig+0x25a>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a30:	e042      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003a32:	2302      	movs	r3, #2
 8003a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a38:	e03e      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a40:	e03a      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003a42:	2308      	movs	r3, #8
 8003a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a48:	e036      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003a4a:	2310      	movs	r3, #16
 8003a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a50:	bf00      	nop
 8003a52:	e031      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2c      	ldr	r2, [pc, #176]	; (8003b0c <UART_SetConfig+0x31c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d129      	bne.n	8003ab2 <UART_SetConfig+0x2c2>
 8003a5e:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <UART_SetConfig+0x324>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6c:	d014      	beq.n	8003a98 <UART_SetConfig+0x2a8>
 8003a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a72:	d802      	bhi.n	8003a7a <UART_SetConfig+0x28a>
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <UART_SetConfig+0x298>
 8003a78:	e016      	b.n	8003aa8 <UART_SetConfig+0x2b8>
 8003a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7e:	d007      	beq.n	8003a90 <UART_SetConfig+0x2a0>
 8003a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a84:	d00c      	beq.n	8003aa0 <UART_SetConfig+0x2b0>
 8003a86:	e00f      	b.n	8003aa8 <UART_SetConfig+0x2b8>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e013      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003a90:	2302      	movs	r3, #2
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e00f      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e00b      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003aa0:	2308      	movs	r3, #8
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa6:	e007      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aae:	bf00      	nop
 8003ab0:	e002      	b.n	8003ab8 <UART_SetConfig+0x2c8>
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <UART_SetConfig+0x31c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	f040 80fe 	bne.w	8003cc0 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d837      	bhi.n	8003b3c <UART_SetConfig+0x34c>
 8003acc:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <UART_SetConfig+0x2e4>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003af9 	.word	0x08003af9
 8003ad8:	08003b3d 	.word	0x08003b3d
 8003adc:	08003b01 	.word	0x08003b01
 8003ae0:	08003b3d 	.word	0x08003b3d
 8003ae4:	08003b2d 	.word	0x08003b2d
 8003ae8:	08003b3d 	.word	0x08003b3d
 8003aec:	08003b3d 	.word	0x08003b3d
 8003af0:	08003b3d 	.word	0x08003b3d
 8003af4:	08003b35 	.word	0x08003b35
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003af8:	f7fe fad2 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8003afc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003afe:	e020      	b.n	8003b42 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <UART_SetConfig+0x338>)
 8003b02:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b04:	e01d      	b.n	8003b42 <UART_SetConfig+0x352>
 8003b06:	bf00      	nop
 8003b08:	efff69f3 	.word	0xefff69f3
 8003b0c:	40008000 	.word	0x40008000
 8003b10:	40013800 	.word	0x40013800
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40004400 	.word	0x40004400
 8003b1c:	40004800 	.word	0x40004800
 8003b20:	40004c00 	.word	0x40004c00
 8003b24:	40005000 	.word	0x40005000
 8003b28:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003b2c:	f7fe fa22 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8003b30:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b32:	e006      	b.n	8003b42 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b38:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b3a:	e002      	b.n	8003b42 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	76fb      	strb	r3, [r7, #27]
        break;
 8003b40:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 81b9 	beq.w	8003ebc <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4413      	add	r3, r2
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d305      	bcc.n	8003b66 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d902      	bls.n	8003b6c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	76fb      	strb	r3, [r7, #27]
 8003b6a:	e1a7      	b.n	8003ebc <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8003b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	f200 8092 	bhi.w	8003c9a <UART_SetConfig+0x4aa>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <UART_SetConfig+0x38c>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003ba1 	.word	0x08003ba1
 8003b80:	08003c9b 	.word	0x08003c9b
 8003b84:	08003bef 	.word	0x08003bef
 8003b88:	08003c9b 	.word	0x08003c9b
 8003b8c:	08003c23 	.word	0x08003c23
 8003b90:	08003c9b 	.word	0x08003c9b
 8003b94:	08003c9b 	.word	0x08003c9b
 8003b98:	08003c9b 	.word	0x08003c9b
 8003b9c:	08003c71 	.word	0x08003c71
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003ba0:	f7fe fa7e 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8003ba4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	f04f 0400 	mov.w	r4, #0
 8003bb6:	0214      	lsls	r4, r2, #8
 8003bb8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003bbc:	020b      	lsls	r3, r1, #8
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6852      	ldr	r2, [r2, #4]
 8003bc2:	0852      	lsrs	r2, r2, #1
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	eb13 0b01 	adds.w	fp, r3, r1
 8003bce:	eb44 0c02 	adc.w	ip, r4, r2
 8003bd2:	4658      	mov	r0, fp
 8003bd4:	4661      	mov	r1, ip
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f04f 0400 	mov.w	r4, #0
 8003bde:	461a      	mov	r2, r3
 8003be0:	4623      	mov	r3, r4
 8003be2:	f7fc faf1 	bl	80001c8 <__aeabi_uldivmod>
 8003be6:	4603      	mov	r3, r0
 8003be8:	460c      	mov	r4, r1
 8003bea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003bec:	e058      	b.n	8003ca0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	085b      	lsrs	r3, r3, #1
 8003bf4:	f04f 0400 	mov.w	r4, #0
 8003bf8:	49ae      	ldr	r1, [pc, #696]	; (8003eb4 <UART_SetConfig+0x6c4>)
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	eb13 0b01 	adds.w	fp, r3, r1
 8003c02:	eb44 0c02 	adc.w	ip, r4, r2
 8003c06:	4658      	mov	r0, fp
 8003c08:	4661      	mov	r1, ip
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f04f 0400 	mov.w	r4, #0
 8003c12:	461a      	mov	r2, r3
 8003c14:	4623      	mov	r3, r4
 8003c16:	f7fc fad7 	bl	80001c8 <__aeabi_uldivmod>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003c20:	e03e      	b.n	8003ca0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003c22:	f7fe f9a7 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8003c26:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	f04f 0400 	mov.w	r4, #0
 8003c38:	0214      	lsls	r4, r2, #8
 8003c3a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003c3e:	020b      	lsls	r3, r1, #8
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6852      	ldr	r2, [r2, #4]
 8003c44:	0852      	lsrs	r2, r2, #1
 8003c46:	4611      	mov	r1, r2
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	eb13 0b01 	adds.w	fp, r3, r1
 8003c50:	eb44 0c02 	adc.w	ip, r4, r2
 8003c54:	4658      	mov	r0, fp
 8003c56:	4661      	mov	r1, ip
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f04f 0400 	mov.w	r4, #0
 8003c60:	461a      	mov	r2, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	f7fc fab0 	bl	80001c8 <__aeabi_uldivmod>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003c6e:	e017      	b.n	8003ca0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	f04f 0400 	mov.w	r4, #0
 8003c7a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003c7e:	f144 0100 	adc.w	r1, r4, #0
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f04f 0400 	mov.w	r4, #0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4623      	mov	r3, r4
 8003c8e:	f7fc fa9b 	bl	80001c8 <__aeabi_uldivmod>
 8003c92:	4603      	mov	r3, r0
 8003c94:	460c      	mov	r4, r1
 8003c96:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003c98:	e002      	b.n	8003ca0 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	76fb      	strb	r3, [r7, #27]
            break;
 8003c9e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca6:	d308      	bcc.n	8003cba <UART_SetConfig+0x4ca>
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cae:	d204      	bcs.n	8003cba <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	60da      	str	r2, [r3, #12]
 8003cb8:	e100      	b.n	8003ebc <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	76fb      	strb	r3, [r7, #27]
 8003cbe:	e0fd      	b.n	8003ebc <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc8:	f040 8084 	bne.w	8003dd4 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8003ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d85f      	bhi.n	8003d94 <UART_SetConfig+0x5a4>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <UART_SetConfig+0x4ec>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003d01 	.word	0x08003d01
 8003ce0:	08003d21 	.word	0x08003d21
 8003ce4:	08003d41 	.word	0x08003d41
 8003ce8:	08003d95 	.word	0x08003d95
 8003cec:	08003d5d 	.word	0x08003d5d
 8003cf0:	08003d95 	.word	0x08003d95
 8003cf4:	08003d95 	.word	0x08003d95
 8003cf8:	08003d95 	.word	0x08003d95
 8003cfc:	08003d7d 	.word	0x08003d7d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d00:	f7fe f9ce 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8003d04:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	005a      	lsls	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	085b      	lsrs	r3, r3, #1
 8003d10:	441a      	add	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d1e:	e03c      	b.n	8003d9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d20:	f7fe f9d4 	bl	80020cc <HAL_RCC_GetPCLK2Freq>
 8003d24:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	005a      	lsls	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	085b      	lsrs	r3, r3, #1
 8003d30:	441a      	add	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d3e:	e02c      	b.n	8003d9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003d4a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6852      	ldr	r2, [r2, #4]
 8003d52:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d5a:	e01e      	b.n	8003d9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5c:	f7fe f90a 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8003d60:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	005a      	lsls	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	441a      	add	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d7a:	e00e      	b.n	8003d9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d92:	e002      	b.n	8003d9a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	76fb      	strb	r3, [r7, #27]
        break;
 8003d98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b0f      	cmp	r3, #15
 8003d9e:	d916      	bls.n	8003dce <UART_SetConfig+0x5de>
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da6:	d212      	bcs.n	8003dce <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f023 030f 	bic.w	r3, r3, #15
 8003db0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	89fb      	ldrh	r3, [r7, #14]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	89fa      	ldrh	r2, [r7, #14]
 8003dca:	60da      	str	r2, [r3, #12]
 8003dcc:	e076      	b.n	8003ebc <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	76fb      	strb	r3, [r7, #27]
 8003dd2:	e073      	b.n	8003ebc <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8003dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d85c      	bhi.n	8003e96 <UART_SetConfig+0x6a6>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <UART_SetConfig+0x5f4>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e09 	.word	0x08003e09
 8003de8:	08003e27 	.word	0x08003e27
 8003dec:	08003e45 	.word	0x08003e45
 8003df0:	08003e97 	.word	0x08003e97
 8003df4:	08003e61 	.word	0x08003e61
 8003df8:	08003e97 	.word	0x08003e97
 8003dfc:	08003e97 	.word	0x08003e97
 8003e00:	08003e97 	.word	0x08003e97
 8003e04:	08003e7f 	.word	0x08003e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e08:	f7fe f94a 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8003e0c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	085a      	lsrs	r2, r3, #1
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	441a      	add	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e24:	e03a      	b.n	8003e9c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e26:	f7fe f951 	bl	80020cc <HAL_RCC_GetPCLK2Freq>
 8003e2a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	085a      	lsrs	r2, r3, #1
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	441a      	add	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e42:	e02b      	b.n	8003e9c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003e4e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6852      	ldr	r2, [r2, #4]
 8003e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e5e:	e01d      	b.n	8003e9c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e60:	f7fe f888 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8003e64:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	085a      	lsrs	r2, r3, #1
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	441a      	add	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e7c:	e00e      	b.n	8003e9c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e94:	e002      	b.n	8003e9c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	76fb      	strb	r3, [r7, #27]
        break;
 8003e9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	d90a      	bls.n	8003eb8 <UART_SetConfig+0x6c8>
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea8:	d206      	bcs.n	8003eb8 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	e003      	b.n	8003ebc <UART_SetConfig+0x6cc>
 8003eb4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003ec8:	7efb      	ldrb	r3, [r7, #27]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3728      	adds	r7, #40	; 0x28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01a      	beq.n	8003fea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd2:	d10a      	bne.n	8003fea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
  }
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af02      	add	r7, sp, #8
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004026:	f7fc ff43 	bl	8000eb0 <HAL_GetTick>
 800402a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b08      	cmp	r3, #8
 8004038:	d10e      	bne.n	8004058 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800403a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f82a 	bl	80040a2 <UART_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e020      	b.n	800409a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b04      	cmp	r3, #4
 8004064:	d10e      	bne.n	8004084 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004066:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f814 	bl	80040a2 <UART_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e00a      	b.n	800409a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	4613      	mov	r3, r2
 80040b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b2:	e05d      	b.n	8004170 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d059      	beq.n	8004170 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040bc:	f7fc fef8 	bl	8000eb0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d302      	bcc.n	80040d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d11b      	bne.n	800410a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040e0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e042      	b.n	8004190 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d02b      	beq.n	8004170 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004126:	d123      	bne.n	8004170 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004130:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004140:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e00f      	b.n	8004190 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	4013      	ands	r3, r2
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	429a      	cmp	r2, r3
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	429a      	cmp	r2, r3
 800418c:	d092      	beq.n	80040b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	661a      	str	r2, [r3, #96]	; 0x60
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff faf0 	bl	80037dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff facd 	bl	80037c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
	...

0800424c <__libc_init_array>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	4e0d      	ldr	r6, [pc, #52]	; (8004284 <__libc_init_array+0x38>)
 8004250:	4c0d      	ldr	r4, [pc, #52]	; (8004288 <__libc_init_array+0x3c>)
 8004252:	1ba4      	subs	r4, r4, r6
 8004254:	10a4      	asrs	r4, r4, #2
 8004256:	2500      	movs	r5, #0
 8004258:	42a5      	cmp	r5, r4
 800425a:	d109      	bne.n	8004270 <__libc_init_array+0x24>
 800425c:	4e0b      	ldr	r6, [pc, #44]	; (800428c <__libc_init_array+0x40>)
 800425e:	4c0c      	ldr	r4, [pc, #48]	; (8004290 <__libc_init_array+0x44>)
 8004260:	f000 f820 	bl	80042a4 <_init>
 8004264:	1ba4      	subs	r4, r4, r6
 8004266:	10a4      	asrs	r4, r4, #2
 8004268:	2500      	movs	r5, #0
 800426a:	42a5      	cmp	r5, r4
 800426c:	d105      	bne.n	800427a <__libc_init_array+0x2e>
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004274:	4798      	blx	r3
 8004276:	3501      	adds	r5, #1
 8004278:	e7ee      	b.n	8004258 <__libc_init_array+0xc>
 800427a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800427e:	4798      	blx	r3
 8004280:	3501      	adds	r5, #1
 8004282:	e7f2      	b.n	800426a <__libc_init_array+0x1e>
 8004284:	0800435c 	.word	0x0800435c
 8004288:	0800435c 	.word	0x0800435c
 800428c:	0800435c 	.word	0x0800435c
 8004290:	08004360 	.word	0x08004360

08004294 <memset>:
 8004294:	4402      	add	r2, r0
 8004296:	4603      	mov	r3, r0
 8004298:	4293      	cmp	r3, r2
 800429a:	d100      	bne.n	800429e <memset+0xa>
 800429c:	4770      	bx	lr
 800429e:	f803 1b01 	strb.w	r1, [r3], #1
 80042a2:	e7f9      	b.n	8004298 <memset+0x4>

080042a4 <_init>:
 80042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a6:	bf00      	nop
 80042a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042aa:	bc08      	pop	{r3}
 80042ac:	469e      	mov	lr, r3
 80042ae:	4770      	bx	lr

080042b0 <_fini>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	bf00      	nop
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr
